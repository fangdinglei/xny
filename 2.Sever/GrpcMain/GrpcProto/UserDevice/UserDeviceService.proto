syntax = "proto3";

option csharp_namespace = "GrpcMain.UserDevice";

import "google/protobuf/empty.proto";
import "Common/CommonResponse.proto";
import "Device/DeviceService.proto";
service UserDeviceService { 

    //只能直接父用户调用 修改设备权限 如果所有权限都false 则删除设备
    rpc UpdateUserDeviceAuthority( Request_UpdateUserDeviceAuthority)
        returns (CommonResponse);
    //只能直接父用户调用 添加用户权限
    rpc AddUserDevice( Request_AddUserDevice)
        returns (CommonResponse);

    //获取用户设备分组信息
    rpc GetGroupInfos(google.protobuf.Empty)
        returns ( Response_GetGroupInfos);
    //更新用户设备分组信息
    rpc UpdateGroupInfos( Request_UpdateGroupInfos)
        returns (CommonResponse);

    //获取用户设备信息 User_Device
    rpc GetUserDevices( Request_GetUserDevices)
        returns ( Response_GetUserDevices);

    //获取用户的所有设备的信息 
    rpc GetDevices( Request_GetDevices)
        returns ( Response_GetDevices);
    //获取用户的一些设备信息
    rpc GetDevices_2( Request_GetDevices_2)
        returns ( Response_GetDevices_2);

     //获取用户所有设备的ID
    rpc GetUserAllDeviceID( Request_GetUserAllDeviceID)
        returns ( Response_GetUserAllDeviceID); 
    
    //将设备加入分组
    rpc SetDeviceGroup( Request_SetDeviceGroup)
        returns (CommonResponse); 

    //添加用户设备分组
    rpc NewGroup( Request_NewGroup)
        returns (CommonResponse); 
     
}


    message User_Device_Group{
        int64 Id=1;
        optional string Name=2;
        //更新时使用,删除数据
        optional bool Delet=3;
    }
    message User_Device{
        //optional int64 Id=1;
        optional int64 Dvid=1;
        int64 UserId=2;
        int64 UserDeviceGroup=3;
        int32 Authority=4;
    }
    message Request_UpdateUserDeviceAuthority{
        repeated int64 Dvids=1; 
        User_Device UserDevice=2;  
    }
    message Request_AddUserDevice{
        repeated int64 Dvids=1; 
        User_Device UserDevice=2;  
    }
    message Response_GetGroupInfos{ 
        repeated  User_Device_Group Groups=1; 
    }

    message Request_UpdateGroupInfos{
        repeated User_Device_Group Groups=1; 
    }


    message Request_GetUserDevices{
        optional int64 Cursor=1;
        //获取子用户时需要
        optional int64 UserId=2;
    }  
    message Response_GetUserDevices{
        //0后续无数据
        int64 Cursor=1;  
        //同传入
        int64 UserId=2;
        repeated User_Device UserDevices=3;
    } 


    message Request_GetDevices{
        //设备ID
        optional int64 Cursor=1;
        optional int64 GroupId=2;
        optional int64 TypeId=3;

    }
    message DeviceWithUserDeviceInfo{
        Device Device=1;
        User_Device UserDevice=2;
    }
    message Request_GetDevices_2{ 
        int64 DeviceId=1;
    }
    message Response_GetDevices_2{ 
        Device Device=1;
    }
    
    message Response_GetDevices{
        //0后续无数据
        int64 Cursor=1;  
        repeated DeviceWithUserDeviceInfo Info=2;
    }


    message Request_GetUserAllDeviceID{
        //获取子用户设备时需要
        optional int64 UserId=1; 
    }  
    message Response_GetUserAllDeviceID{
        int64 UserId=1;
        repeated int64 Dvids=2; 
    }  
    
    message Request_SetDeviceGroup{ 
        //备用
        optional int64 UserId=1;
        repeated int64 Dvids=2;
        //没有则默认分组
        optional int64 GroupId=3;
    }  
    message Request_NewGroup{
        string Name=1;
    } 
