// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyDBContext.Main;

#nullable disable

namespace DBContext.Main.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20230503060056_2")]
    partial class _2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyDBContext.Main.AccountHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Time");

                    b.HasIndex("UserTreeId");

                    b.ToTable("AccountHistorys");
                });

            modelBuilder.Entity("MyDBContext.Main.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("LatestData")
                        .HasColumnType("longtext");

                    b.Property<string>("LocationStr")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("Name");

                    b.HasIndex("UserTreeId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("MyDBContext.Main.Device_AutoControl_Settings_Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Cmd")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<bool>("Open")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("OwnerID")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeEnd")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeStart")
                        .HasColumnType("bigint");

                    b.Property<byte>("TriggerType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Week")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("Device_AutoControl_Settings_Items");
                });

            modelBuilder.Entity("MyDBContext.Main.Device_DataPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<long>("StreamId")
                        .HasColumnType("bigint");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId", "StreamId", "Time");

                    b.ToTable("Device_DataPoints");
                });

            modelBuilder.Entity("MyDBContext.Main.Device_DataPoint_Cold", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("CreatTime")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<long>("EndTime")
                        .HasColumnType("bigint");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext");

                    b.Property<string>("Pars")
                        .HasColumnType("longtext");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<long>("StreamId")
                        .HasColumnType("bigint");

                    b.Property<long>("TreeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId", "StreamId", "StartTime", "EndTime");

                    b.ToTable("Device_DataPoint_Colds");
                });

            modelBuilder.Entity("MyDBContext.Main.Device_Repair", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CompletionTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Context")
                        .HasColumnType("longtext");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<long>("DiscoveryTime")
                        .HasColumnType("bigint");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompletionTime");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DiscoveryTime", "Id");

                    b.ToTable("Device_Repairs");
                });

            modelBuilder.Entity("MyDBContext.Main.Device_Type", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Script")
                        .HasColumnType("longtext");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserTreeId");

                    b.ToTable("Device_Types");
                });

            modelBuilder.Entity("MyDBContext.Main.DeviceColdDataSettings", b =>
                {
                    b.Property<long>("TreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ColdDownTime")
                        .HasColumnType("bigint");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext");

                    b.Property<long>("MinCount")
                        .HasColumnType("bigint");

                    b.Property<bool>("Open")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("TreeId");

                    b.ToTable("ColdDataSettings");
                });

            modelBuilder.Entity("MyDBContext.Main.DeviceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DeviceHistorys");
                });

            modelBuilder.Entity("MyDBContext.Main.Internal_Mail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Context")
                        .HasColumnType("longtext");

                    b.Property<long>("LastEMailTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("Readed")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("Time");

                    b.HasIndex("UserTreeId");

                    b.ToTable("Internal_Mails");
                });

            modelBuilder.Entity("MyDBContext.Main.KeyValue", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.HasKey("Key");

                    b.ToTable("t_kv");
                });

            modelBuilder.Entity("MyDBContext.Main.ThingModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("Abandonted")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("AlertHighValue")
                        .HasColumnType("float");

                    b.Property<float>("AlertLowValue")
                        .HasColumnType("float");

                    b.Property<long>("DeviceTypeId")
                        .HasColumnType("bigint");

                    b.Property<float>("MaxValue")
                        .HasColumnType("float");

                    b.Property<float>("MinValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext");

                    b.Property<long>("UserTreeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("ThingModels");
                });

            modelBuilder.Entity("MyDBContext.Main.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Authoritys")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("EMail")
                        .HasColumnType("longtext");

                    b.Property<long>("LastLogin")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxSubUser")
                        .HasColumnType("int");

                    b.Property<int>("MaxSubUserDepth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Pass")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("TreeDeep")
                        .HasColumnType("int");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int")
                        .HasComment("表示用户属于哪一个用户族");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name");

                    b.HasIndex("UserTreeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyDBContext.Main.User_Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Authority")
                        .HasColumnType("int");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.Property<long>("User_Device_GroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserTreeId");

                    b.HasIndex("User_Device_GroupId");

                    b.HasIndex("UserId", "DeviceId");

                    b.ToTable("User_Devices");
                });

            modelBuilder.Entity("MyDBContext.Main.User_Device_Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name");

                    b.HasIndex("UserTreeId");

                    b.ToTable("User_Device_Groups");
                });

            modelBuilder.Entity("MyDBContext.Main.User_Op_Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AuditorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<string>("Op")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("SponsorId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditorId");

                    b.HasIndex("Op");

                    b.HasIndex("SponsorId");

                    b.HasIndex("Time");

                    b.HasIndex("UserTreeId");

                    b.ToTable("User_Op_Audits");
                });

            modelBuilder.Entity("MyDBContext.Main.User_SF", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFather")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSelf")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("User1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("User2Id")
                        .HasColumnType("bigint");

                    b.Property<int>("UserTreeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.HasIndex("UserTreeId");

                    b.ToTable("User_SFs");
                });

            modelBuilder.Entity("MyDBContext.Main.Device", b =>
                {
                    b.HasOne("MyDBContext.Main.Device_Type", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("MyDBContext.Main.Device_Repair", b =>
                {
                    b.HasOne("MyDBContext.Main.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MyDBContext.Main.ThingModel", b =>
                {
                    b.HasOne("MyDBContext.Main.Device_Type", "DeviceType")
                        .WithMany("ThingModels")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("MyDBContext.Main.User", b =>
                {
                    b.HasOne("MyDBContext.Main.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MyDBContext.Main.User_Device", b =>
                {
                    b.HasOne("MyDBContext.Main.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDBContext.Main.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDBContext.Main.User_Device_Group", "User_Device_Group")
                        .WithMany()
                        .HasForeignKey("User_Device_GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");

                    b.Navigation("User_Device_Group");
                });

            modelBuilder.Entity("MyDBContext.Main.User_Device_Group", b =>
                {
                    b.HasOne("MyDBContext.Main.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MyDBContext.Main.User_Op_Audit", b =>
                {
                    b.HasOne("MyDBContext.Main.User", "Auditor")
                        .WithMany()
                        .HasForeignKey("AuditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDBContext.Main.User", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditor");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("MyDBContext.Main.User_SF", b =>
                {
                    b.HasOne("MyDBContext.Main.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDBContext.Main.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("MyDBContext.Main.Device_Type", b =>
                {
                    b.Navigation("ThingModels");
                });
#pragma warning restore 612, 618
        }
    }
}
